# Generated by Django 3.0.2 on 2020-02-05 19:41

import dining_room.models.website
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('dining_room', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actions',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Actions',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('dining_room.user',),
            managers=[
                ('objects', dining_room.models.website.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='studymanagement',
            name='max_test_attempts',
            field=models.IntegerField(default=5, help_text='Maximum number of times a user can fail the knowledge test'),
        ),
        migrations.AddField(
            model_name='user',
            name='amt_worker_id',
            field=models.CharField(blank=True, max_length=80, null=True, verbose_name='Worker ID'),
        ),
        migrations.AddField(
            model_name='user',
            name='study_management',
            field=models.ForeignKey(blank=True, default=dining_room.models.website.StudyManagement.get_default_pk, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dining_room.StudyManagement'),
        ),
        migrations.AlterField(
            model_name='studymanagement',
            name='data_directory',
            field=models.CharField(help_text="Data directory for user data within '/DiningRoom_IsolationCYOA/data'", max_length=50),
        ),
        migrations.CreateModel(
            name='StudyAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_timestamp', models.DateTimeField()),
                ('end_timestamp', models.DateTimeField()),
                ('start_state', models.CharField(max_length=80)),
                ('diagnoses', multiselectfield.db.fields.MultiSelectField(choices=[('lost', 'The robot is lost'), ('cannot_move', 'The robot is stuck: cannot move to a new location'), ('base_collision', 'The robot has collided with an object'), ('path_blocked', "The robot's path is blocked"), ('cannot_pick', 'The cup cannot be picked up'), ('cannot_see', 'The cup is not visible'), ('different_location', 'The cup is not where it should be'), ('object_fell', "The object fell out of the robot's hand"), ('battery_low', 'The battery is low'), ('video_problem', 'There is a problem with the camera feed'), ('none', 'There is no problem')], max_length=129)),
                ('diagnosis_certainty', models.IntegerField()),
                ('action', models.CharField(choices=[('at_c', "Update robot's location belief to: Couch"), ('at_dt', "Update robot's location belief to:  Dining Table"), ('at_kc', "Update robot's location belief to:  Kitchen Counter"), ('go_to_c', 'Navigate to Couch'), ('go_to_dt', 'Navigate to Dining Table'), ('go_to_kc', 'Navigate to Kitchen Counter'), ('remove_obstacle', 'Remove the obstacle blocking navigation'), ('out_of_collision', 'Move away from a collision'), ('look_at_c', 'Look at Couch'), ('look_at_dt', 'Look at Dining Table'), ('look_at_kc', 'Look at Kitchen Counter'), ('pick_bowl', 'Pick up the Bowl'), ('pick_jug', 'Pick up the Jug'), ('pick_mug', 'Pick up the Cup'), ('place', 'Put away held object'), ('restart_video', 'Restart the video'), ('find_charger', 'Find the charger and navigate to it')], max_length=20)),
                ('next_state', models.CharField(blank=True, max_length=80, null=True)),
                ('video_loaded_time', models.DateTimeField()),
                ('video_stop_time', models.DateTimeField()),
                ('dx_selected_time', models.DateTimeField()),
                ('dx_confirmed_time', models.DateTimeField()),
                ('ax_selected_time', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'study action',
                'verbose_name_plural': 'study actions',
            },
        ),
    ]
